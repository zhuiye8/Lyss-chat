{"type":"entity","name":"Lyss AI Platform","entityType":"project","observations":["企业级的AI服务聚合与管理平台","采用微服务架构","为多租户环境提供统一的AI模型集成、智能路由和成本管控解决方案","核心目标：统一接入、成本管控、协作共享","已完成第一阶段核心规范制定工作","成功创建了统一技术规范文档(docs/technical-standards.md)","成功创建了微服务架构设计文档(docs/microservices-architecture.md)","两个核心文档基于2024-2025年最新技术标准制定","文档包含完整的API设计规范、数据库设计规范、JWT认证规范、日志记录规范等","启动文档补充和完善工作","制定了14项具体的文档补充任务","分为高、中、低三个优先级","重点聚焦技术调研和微服务开发文档","已完成三大核心调研工作","one-api架构分析：掌握了适配器模式、负载均衡、数据库设计等关键技术","mem0.ai记忆服务评估：确定了生产环境推荐方案(Mem0+Redis)","Open WebUI前端分析：学习了Svelte组件架构、状态管理、实时通信等设计模式","正在进行技术栈选型决策制定","已完成所有高优先级任务","技术栈选型：Go + PostgreSQL + Vue 3 + Mem0/Redis","数据库设计：微服务数据隔离、分区策略、加密存储","开始中优先级任务：建立文档目录结构","完成标准化文档目录结构建设","按功能模块分类：00-项目总览、01-技术规范、02-调研报告、03-数据库、04-微服务、05-部署运维","创建了详细的文档导航(docs/README.md)","已移动现有文档到对应目录","开始创建用户服务开发文档","2025-01-25: 项目文档100%完成，所有19个核心文档已创建完毕","所有文档已统一更新至v2.0版本，状态为'已确认'","技术栈已全面从Gin+GORM升级至Kratos微服务框架","实现了完整的AI-to-AI友好文档体系","包含6个微服务的完整开发指南和部署文档"]}
{"type":"entity","name":"微服务架构","entityType":"architecture","observations":["用户服务(User Service): 负责用户注册、登录、信息管理","认证服务(Auth Service): 专门负责JWT的生成与验证","群组服务(Group Service): 负责群组的创建、成员关系、权限管理","凭证服务(Credential Service): 负责个人和群组API Key的安全存储与管理","网关服务(Gateway Service): 核心AI请求的入口，负责路由、调用上游供应商","计费服务(Billing/Consumption Service): 负责记录Token用量和计算成本"]}
{"type":"entity","name":"用户权限体系","entityType":"business_rule","observations":["用户(User): 系统基础单位，通过邮箱注册","超级管理员(Super Admin): 系统唯一最高权限管理者","群主(Owner): 群组创建者，拥有管理权限和配置权限","管理员(Admin): 可由群主任命，负责成员管理和资源管理","成员(Member): 群组基础用户，使用被分配的AI模型服务"]}
{"type":"entity","name":"凭证安全模型","entityType":"security_rule","observations":["采用单表设计，通过scope('personal'/'group')和scope_id区分凭证归属","API Key等敏感信息保存后无法再次查看明文","支持'清空并替换'操作更新凭证","群组管理员可编辑非敏感信息如模型温度等"]}
{"type":"entity","name":"技术实现规范","entityType":"technical_standard","observations":["必须遵循RESTful风格，API版本控制(/api/v1/...)","必须采用JWT进行身份验证","必须提供统一JSON错误响应格式","必须为数据库关键字段建立索引","必须使用环境变量管理配置和密钥","必须实施API速率限制和输入验证"]}
{"type":"entity","name":"技术架构最终版","entityType":"architecture","observations":["最终技术栈: Go + Kratos + GORM + PostgreSQL + Redis + ClickHouse","采用混合部署模式: 本地服务 + Docker基础设施","实现了会话管理和多轮对话机制","完整的监控体系: Prometheus + Grafana + Jaeger","安全框架: JWT + AES-256-GCM + 清除替换模型"]}
{"type":"entity","name":"文档系统最终版","entityType":"documentation","observations":["总计19个核心文档，100%完成率","文档结构: 00-project-overview, 01-standards, 02-research, 03-database, 04-services, 05-deployment","所有微服务文档包含完整的Kratos代码实现","技术调研涵盖one-api、mem0.ai、Open WebUI等关键项目","部署文档支持开发环境搭建和生产环境Docker配置","2025-01-25: 完成开发路线图设计，总文档数量更新为20个","新增06-development-roadmap目录，包含完整的多会话AI协同开发路线图","创建了状态跟踪系统：/status/phase-progress.md, service-status.json, known-issues.md","提供了标准化的Makefile开发工具集","设计了10个开发阶段，每个阶段都有清晰的输入输出和验收标准"]}
{"type":"entity","name":"项目里程碑2025","entityType":"milestone","observations":["2025-01-25: 项目文档100%完成里程磑","历时多个开发会话，完成全部19个核心文档","所有文档已统一更新至v2.0版本，状态为'已确认'","实现了完整的AI-to-AI友好文档体系","技术栈从Gin+GORM成功升级至Kratos微服务框架","2025-01-25: 开发路线图发布，支持多会话AI协同开发","设计了完整的会话启动和结束协议","实现了状态透明化和故障恢复机制","提供了完整的质量保证和验收标准","项目现在具备了开始实际开发的所有条件"]}
{"type":"relation","from":"Lyss AI Platform","to":"微服务架构","relationType":"采用"}
{"type":"relation","from":"Lyss AI Platform","to":"用户权限体系","relationType":"实现"}
{"type":"relation","from":"Lyss AI Platform","to":"凭证安全模型","relationType":"遵循"}
{"type":"relation","from":"Lyss AI Platform","to":"技术实现规范","relationType":"遵循"}
{"type":"relation","from":"微服务架构","to":"技术实现规范","relationType":"遵循"}